// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ADMIN)
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Category {
  id          String    @id @default(cuid())
  nameAr      String    // Arabic name
  nameEn      String    // English name
  emoji       String?   // Category emoji
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id               String        @id @default(cuid())
  nameAr           String        // Arabic name
  nameEn           String        // English name
  descriptionAr    String?       // Arabic description
  descriptionEn    String?       // English description
  category         Category      @relation(fields: [categoryId], references: [id])
  categoryId       String
  isActive         Boolean       @default(true)
  hasCustomSpecs   Boolean       @default(false)
  isCashImport     Boolean       @default(false) // استيراد نقدي متوفر
  specifications   String[]      // Array of specifications
  images           String[]      // Array of image URLs
  inquiryItems     InquiryItem[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("products")
}

model Inquiry {
  id           String        @id @default(cuid())
  customerName String
  customerEmail String?
  customerPhone String?
  companyName  String?
  status       InquiryStatus @default(PENDING)
  notes        String?
  totalItems   Int           @default(0)
  items        InquiryItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("inquiries")
}

model InquiryItem {
  id            String  @id @default(cuid())
  inquiry       Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  inquiryId     String
  product       Product @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  specifications String?
  brand         String? // محلي أو مستورد
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("inquiry_items")
}

// Enums
enum Role {
  ADMIN
  SUPER_ADMIN
}

enum InquiryStatus {
  PENDING
  IN_PROGRESS
  QUOTED
  COMPLETED
  CANCELLED
}

// Hero Slider model
model HeroSlider {
  id          String   @id @default(cuid())
  title       String   // Slider title
  description String?  // Slider description
  image       String   // Image URL
  category    String?  // Optional category
  isActive    Boolean  @default(true)
  order       Int      @default(0) // Display order
  buttonText  String?  // Optional button text
  buttonLink  String?  // Optional button link
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hero_sliders")
}
